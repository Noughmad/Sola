1c1
< from plot.owplot import *
---
> from OWGraph import *
9,10c9
< from plot.owtools import UnconnectedLinesCurve, ProbabilitiesItem
< import numpy
---
> from OWGraphTools import UnconnectedLinesCurve
27c26
< class OWLinProjGraph(OWPlot, orngScaleLinProjData):
---
> class OWLinProjGraph(OWGraph, orngScaleLinProjData):
29c28
<         OWPlot.__init__(self, parent, name, axes=[], widget=widget)
---
>         OWGraph.__init__(self, parent, name)
66,76d64
<         
<         range = (-1.13, 1.13)
<         self.data_range[xBottom] = range
<         self.data_range[yLeft] = range
<         
<         self._extra_curves = []
<         self.current_tooltip_point = None
<         self.connect(self, SIGNAL("point_hovered(Point*)"), self.draw_tooltips)
<         
<         self.value_line_curves = []
<         self.potentialsCurve = None
78c66,69
<         self.warn_unused_attributes = True
---
>         self.enableXaxis(0)
>         self.enableYLaxis(0)
>         self.setAxisScale(QwtPlot.xBottom, -1.13, 1.13, 1)
>         self.setAxisScale(QwtPlot.yLeft, -1.13, 1.13, 1)
81c72
<         OWPlot.setData(self, data)
---
>         OWGraph.setData(self, data)
84a76,78
>         self.setAxisScale(QwtPlot.yLeft, -1.13, 1.13, 1)
>         self.setAxisScale(QwtPlot.xBottom, -1.13, 1.13, 1)
> 
86,88c80,81
<             self.data_range[xBottom] = (-1.13, 1.13 + 0.1) # if we have a continuous class we need a bit more space on the right to show a color legend
<         else:
<             self.data_range[xBottom] = (-1.13, 1.13)
---
>             self.setAxisScale(QwtPlot.xBottom, -1.13, 1.13 + 0.1, 1)   # if we have a continuous class we need a bit more space on the right to show a color legend
> 
92,94c85,87
<         for c in self._extra_curves:
<             c.detach()
<         self._extra_curves = []
---
>         self.removeDrawingCurves()  # my function, that doesn't delete selection curves
>         #self.removeCurves()
>         self.removeMarkers()
96,100d88
<         for c in self.value_line_curves:
<             c.detach()
<         self.value_line_curves = []
<         self.legend().clear()
<         self.clear_markers()
123,126c111,113
<                 circle = CircleCurve(QColor(200,200,200), QColor(200,200,200), radius = self.hideRadius)
<                 circle.ignore_alpha = True
<                 self.add_custom_curve(circle)
<                 self._extra_curves.append(circle)
---
>                 xdata = self.createXAnchors(100)*(self.hideRadius / 10)
>                 ydata = self.createYAnchors(100)*(self.hideRadius / 10)
>                 self.addCurve("hidecircle", QColor(200,200,200), QColor(200,200,200), 1, style = QwtPlotCurve.Lines, symbol = QwtSymbol.NoSymbol, xData = xdata.tolist() + [xdata[0]], yData = ydata.tolist() + [ydata[0]])
130c117
<             self.remove_all_axes(user_only = False)
---
> 
134,143c121,123
<                     if x > 0:
<                         line = QLineF(0, 0, x, y)
<                         arrows = AxisEnd
<                         label_pos = AxisEnd
<                     else:
<                         line = QLineF(x, y, 0, 0)
<                         arrows = AxisStart
<                         label_pos = AxisStart
<                     self.add_axis(UserAxis + i, title=a, title_location=label_pos, line=line, arrows=arrows, zoomable=True)
<                     self.setAxisLabels(UserAxis + i, [])
---
>                     self.addCurve("l%i" % i, QColor(160, 160, 160), QColor(160, 160, 160), 10, style = QwtPlotCurve.Lines, symbol = QwtSymbol.NoSymbol, xData = [0, x], yData = [0, y], showFilledSymbols = 1, lineWidth=2)
>                     if self.showAttributeNames:
>                         self.addMarker(a, x*1.07, y*1.04, Qt.AlignCenter, bold=1)
147,149c127
<                 c = self.addCurve("dots", QColor(160,160,160), QColor(160,160,160), 10, style = Qt.NoPen, symbol = OWPoint.Ellipse, xData = XAnchors, yData = YAnchors, showFilledSymbols = 1)
<                 c.ignore_alpha = True
<                 self._extra_curves.append(c)
---
>                 self.addCurve("dots", QColor(160,160,160), QColor(160,160,160), 10, style = QwtPlotCurve.NoCurve, symbol = QwtSymbol.Ellipse, xData = XAnchors, yData = YAnchors, showFilledSymbols = 1)
158,161c136,138
<             circle = CircleCurve()
<             circle.ignore_alpha = True
<             self.add_custom_curve(circle)
<             self._extra_curves.append(circle)
---
>             xdata = self.createXAnchors(100)
>             ydata = self.createYAnchors(100)
>             self.addCurve("circle", QColor(Qt.black), QColor(Qt.black), 1, style = QwtPlotCurve.Lines, symbol = QwtSymbol.NoSymbol, xData = xdata.tolist() + [xdata[0]], yData = ydata.tolist() + [ydata[0]])
178d154
<         
182,184c158
<         if self.potentialsCurve:
<             self.potentialsCurve.detach()
<             self.potentialsCurve = None
---
> 
195,196d168
<                 self.potentialsCurve = ProbabilitiesItem(self.potentialsClassifier, self.squareGranularity, self.trueScaleFactor/2, self.spaceBetweenCells, QRectF(-1, -1, 2, 2))
<                 self.potentialsCurve.attach(self)
202,228d173
<         if self.useDifferentColors:
<             if self.dataHasDiscreteClass:
<                 color_data = [QColor(*self.discPalette.getRGB(i)) for i in self.originalData[self.dataClassIndex]]
<             elif self.dataHasContinuousClass:    
<                 color_data = [QColor(*self.contPalette.getRGB(i)) for i in self.originalData[self.dataClassIndex]]
<             else:
<                 color_data = [Qt.black]
<         else:
<             color_data = [Qt.black]
<                         
<         if self.useDifferentSymbols and self.dataHasDiscreteClass:
<             symbol_data = [self.curveSymbols[int(i)] for i in self.originalData[self.dataClassIndex]]
<         else:
<             symbol_data = [OWPoint.Ellipse]
<             
<         size_data = [self.point_width]
<         label_data = []
<         
<         if self.haveSubsetData:
<             subset_ids = [example.id for example in self.rawSubsetData]
<             marked_data = [example.id in subset_ids for example in self.rawData]
<             showFilled = 0
<         else:
<             marked_data = []
< 
<         self.set_main_curve_data(x_positions, y_positions, color_data, label_data, size_data, symbol_data, marked_data, validData)
<         
253a199
>                     self.addCurve(str(i), QColor(*fillColor+ (self.alphaValue,)), QColor(*edgeColor+ (self.alphaValue,)), self.pointWidth, xData = [x_positions[i]], yData = [y_positions[i]])
265a212
>                     self.addCurve(str(i), QColor(*fillColor+ (self.alphaValue,)), QColor(*edgeColor+ (self.alphaValue,)), self.pointWidth, xData = [x_positions[i]], yData = [y_positions[i]])
294a242,246
>                 if not xPointsToAdd.has_key((newColor, curveSymbol,0)):
>                     xPointsToAdd[(newColor, curveSymbol,0)] = []
>                     yPointsToAdd[(newColor, curveSymbol,0)] = []
>                 xPointsToAdd[(newColor, curveSymbol,0)].append(x_positions[i])
>                 yPointsToAdd[(newColor, curveSymbol,0)].append(y_positions[i])
299a252,282
>             # if we have a data subset that contains examples that don't exist in the original dataset we show them here
>             XAnchors = numpy.array([val[0] for val in self.anchorData])
>             YAnchors = numpy.array([val[1] for val in self.anchorData])
>             anchorRadius = numpy.sqrt(XAnchors*XAnchors + YAnchors*YAnchors)
>             validSubData = self.getValidSubsetList(indices)
>             projSubData = self.createProjectionAsNumericArray(indices, validData = validSubData, scaleFactor = self.scaleFactor, normalize = self.normalizeExamples, jitterSize = -1, useAnchorData = 1, removeMissingData = 0, useSubsetData = 1).T
>             sub_x_positions = projSubData[0]
>             sub_y_positions = projSubData[1]
> 
>             for i in range(len(self.rawSubsetData)):
>                 if not validSubData[i]: continue    # check if has missing values
> 
>                 if not self.dataHasClass or self.rawSubsetData[i].getclass().isSpecial():
>                     newColor = (0,0,0)
>                 else:
>                     if self.dataHasDiscreteClass:
>                         newColor = self.discPalette.getRGB(self.originalSubsetData[self.dataClassIndex][i])
>                     else:
>                         newColor = self.contPalette.getRGB(self.noJitteringScaledSubsetData[self.dataClassIndex][i])
> 
>                 if self.useDifferentSymbols and self.dataHasDiscreteClass and self.validSubsetDataArray[self.dataClassIndex][i]:
>                     curveSymbol = self.curveSymbols[int(self.originalSubsetData[self.dataClassIndex][i])]
>                 else:
>                     curveSymbol = self.curveSymbols[0]
> 
>                 if not xPointsToAdd.has_key((newColor, curveSymbol, 1)):
>                     xPointsToAdd[(newColor, curveSymbol, 1)] = []
>                     yPointsToAdd[(newColor, curveSymbol, 1)] = []
>                 xPointsToAdd[(newColor, curveSymbol, 1)].append(sub_x_positions[i])
>                 yPointsToAdd[(newColor, curveSymbol, 1)].append(sub_y_positions[i])
> 
308a292
>             self.addCurve(str(1), QColor(0,0,0,self.alphaValue), QColor(0,0,0,self.alphaValue), self.pointWidth, symbol = self.curveSymbols[0], xData = xs, yData = ys, penAlpha = self.alphaValue, brushAlpha = self.alphaValue)
316a301
>                 self.addCurve(str(i), QColor(*newColor+ (self.alphaValue,)), QColor(*newColor+ (self.alphaValue,)), self.pointWidth, symbol = QwtSymbol.Ellipse, xData = [x_positions[i]], yData = [y_positions[i]])
328a314,320
>                 if self.useDifferentSymbols: curveSymbol = self.curveSymbols[int(self.originalData[self.dataClassIndex][i])]
>                 else:                        curveSymbol = self.curveSymbols[0]
>                 if not xPointsToAdd.has_key((newColor, curveSymbol, self.showFilledSymbols)):
>                     xPointsToAdd[(newColor, curveSymbol, self.showFilledSymbols)] = []
>                     yPointsToAdd[(newColor, curveSymbol, self.showFilledSymbols)] = []
>                 xPointsToAdd[(newColor, curveSymbol, self.showFilledSymbols)].append(x_positions[i])
>                 yPointsToAdd[(newColor, curveSymbol, self.showFilledSymbols)].append(y_positions[i])
338d329
<                 self.value_line_curves.append(curve)
339a331,335
>         # draw all the points with a small number of curves
>         for i, (color, symbol, showFilled) in enumerate(xPointsToAdd.keys()):
>             xData = xPointsToAdd[(color, symbol, showFilled)]
>             yData = yPointsToAdd[(color, symbol, showFilled)]
>             self.addCurve(str(i), QColor(*color + (self.alphaValue,)), QColor(*color + (self.alphaValue,)), self.pointWidth, symbol = symbol, xData = xData, yData = yData, showFilledSymbols = showFilled)
344,349c340,343
<         # show legend for discrete class
<         if self.dataHasDiscreteClass:
<             classVariableValues = getVariableValuesSorted(self.dataDomain.classVar)
<             for index in range(len(classVariableValues)):
<                 if self.useDifferentColors: color = QColor(self.discPalette[index])
<                 else:                       color = QColor(Qt.black)
---
>         if self.showLegend:
>             # show legend for discrete class
>             if self.dataHasDiscreteClass:
>                 self.addMarker(self.dataDomain.classVar.name, 0.87, 1.05, Qt.AlignLeft | Qt.AlignVCenter)
351,352c345,370
<                 if not self.useDifferentSymbols:  curveSymbol = self.curveSymbols[0]
<                 else:                             curveSymbol = self.curveSymbols[index]
---
>                 classVariableValues = getVariableValuesSorted(self.dataDomain.classVar)
>                 for index in range(len(classVariableValues)):
>                     if self.useDifferentColors: color = QColor(self.discPalette[index])
>                     else:                       color = QColor(Qt.black)
>                     y = 1.0 - index * 0.05
> 
>                     if not self.useDifferentSymbols:  curveSymbol = self.curveSymbols[0]
>                     else:                             curveSymbol = self.curveSymbols[index]
> 
>                     self.addCurve(str(index), color, color, self.pointWidth, symbol = curveSymbol, xData = [0.95], yData = [y], penAlpha = self.alphaValue, brushAlpha = self.alphaValue)
>                     self.addMarker(classVariableValues[index], 0.90, y, Qt.AlignLeft | Qt.AlignVCenter)
>             # show legend for continuous class
>             elif self.dataHasContinuousClass:
>                 xs = [1.15, 1.20, 1.20, 1.15]
>                 count = 200
>                 height = 2 / float(count)
>                 for i in range(count):
>                     y = -1.0 + i*2.0/float(count)
>                     col = self.contPalette[i/float(count)]
>                     col.setAlpha(self.alphaValue)
>                     PolygonCurve(QPen(col), QBrush(col), xData = xs, yData = [y,y, y+height, y+height]).attach(self)
> 
>                 # add markers for min and max value of color attribute
>                 [minVal, maxVal] = self.attrValues[self.dataDomain.classVar.name]
>                 self.addMarker("%s = %%.%df" % (self.dataDomain.classVar.name, self.dataDomain.classVar.numberOfDecimals) % (minVal), xs[0] - 0.02, -1.0 + 0.04, Qt.AlignLeft)
>                 self.addMarker("%s = %%.%df" % (self.dataDomain.classVar.name, self.dataDomain.classVar.numberOfDecimals) % (maxVal), xs[0] - 0.02, +1.0 - 0.04, Qt.AlignLeft)
354,357d371
<                 self.legend().add_item(self.dataDomain.classVar.name, classVariableValues[index], OWPoint(curveSymbol, color, self.pointWidth))
<         # show legend for continuous class
<         elif self.dataHasContinuousClass:
<             self.legend().add_color_gradient(self.dataDomain.classVar.name, [("%%.%df" % self.dataDomain.classVar.numberOfDecimals % v) for v in self.attrValues[self.dataDomain.classVar.name]])
365,366c379,382
<         dictValue = (x, y)
<         self.dataMap[dictValue] = (x, y, color, index, extraString)
---
>         dictValue = "%.1f-%.1f"%(x, y)
>         if not self.dataMap.has_key(dictValue): self.dataMap[dictValue] = []
>         self.dataMap[dictValue].append((x, y, color, index, extraString))
> 
384a401
> 
398c415
<             OWPlot.mousePressEvent(self, e)
---
>             OWGraph.mousePressEvent(self, e)
406c423
<             OWPlot.mouseReleaseEvent(self, e)
---
>             OWGraph.mouseReleaseEvent(self, e)
407a425,426
>     # ##############################################################
>     # draw tooltips
409,426c428
<         if self._pressed_mouse_button and self.manualPositioning and self.selectedAnchorIndex != None:
<             if self.selectedAnchorIndex != None:
<                 if self.widget.freeVizDlg.restrain == 1:
<                     rad = sqrt(xFloat**2 + yFloat**2)
<                     xFloat /= rad
<                     yFloat /= rad
<                 elif self.widget.freeVizDlg.restrain == 2:
<                     rad = sqrt(xFloat**2 + yFloat**2)
<                     phi = 2 * self.selectedAnchorIndex * math.pi / len(self.anchorData)
<                     xFloat = rad * cos(phi)
<                     yFloat = rad * sin(phi)
<                 self.anchorData[self.selectedAnchorIndex] = (xFloat, yFloat, self.anchorData[self.selectedAnchorIndex][2])
<                 self.updateData(self.shownAttributes)
<                 self.replot()
<                 #self.widget.recomputeEnergy()
<         else:
<             OWPlot.mouseMoveEvent(self, e)
<     
---
>         redraw = (self.tooltipCurves != [] or self.tooltipMarkers != [])
428,435d429
<     # ##############################################################
<     # draw tooltips        
<     def draw_tooltips(self, point):
<         if point is self.current_tooltip_point:
<             return
<             
< 	self.current_tooltip_point = point
<             
440,442d433
<         
<         if not point:
<             return
444c435,460
<         xFloat, yFloat = point.coordinates()
---
>         canvasPos = self.canvas().mapFrom(self, e.pos())
>         xFloat = self.invTransform(QwtPlot.xBottom, canvasPos.x())
>         yFloat = self.invTransform(QwtPlot.yLeft, canvasPos.y())
> 
>         # in case we are drawing a rectangle, we don't draw enhanced tooltips
>         # because it would then fail to draw the rectangle
>         if self.mouseCurrentlyPressed:
>             if not self.manualPositioning:
>                 OWGraph.mouseMoveEvent(self, e)
>                 if redraw: self.replot()
>             else:
>                 if self.selectedAnchorIndex != None:
>                     if self.widget.freeVizDlg.restrain == 1:
>                         rad = sqrt(xFloat**2 + yFloat**2)
>                         xFloat /= rad
>                         yFloat /= rad
>                     elif self.widget.freeVizDlg.restrain == 2:
>                         rad = sqrt(xFloat**2 + yFloat**2)
>                         phi = 2 * self.selectedAnchorIndex * math.pi / len(self.anchorData)
>                         xFloat = rad * cos(phi)
>                         yFloat = rad * sin(phi)
>                     self.anchorData[self.selectedAnchorIndex] = (xFloat, yFloat, self.anchorData[self.selectedAnchorIndex][2])
>                     self.updateData(self.shownAttributes)
>                     self.replot()
>                     #self.widget.recomputeEnergy()
>             return
446c462
<         dictValue = (xFloat, yFloat)
---
>         dictValue = "%.1f-%.1f"%(xFloat, yFloat)
448,450c464,474
<             (x_i, y_i, color, index, extraString) = self.dataMap[dictValue]
<             intX = self.transform(xBottom, x_i)
<             intY = self.transform(yLeft, y_i)
---
>             points = self.dataMap[dictValue]
>             bestDist = 100.0
>             for (x_i, y_i, color, index, extraString) in points:
>                 currDist = sqrt((xFloat-x_i)*(xFloat-x_i) + (yFloat-y_i)*(yFloat-y_i))
>                 if currDist < bestDist:
>                     bestDist = currDist
>                     nearestPoint = (x_i, y_i, color, index, extraString)
> 
>             (x_i, y_i, color, index, extraString) = nearestPoint
>             intX = self.transform(QwtPlot.xBottom, x_i)
>             intY = self.transform(QwtPlot.yLeft, y_i)
452c476
<             if self.tooltipKind == LINE_TOOLTIPS:
---
>             if self.tooltipKind == LINE_TOOLTIPS and bestDist < 0.05:
458,460c482
<                         curve = self.addCurve("", color, color, 1, style = Qt.SolidLine, symbol = OWPoint.NoSymbol, xData = [0, xAnchor*attrVal], yData = [0, yAnchor*attrVal], lineWidth=3)
<                         curve.setZValue(HighlightZValue)
<                         self.tooltipCurves.append(curve)
---
>                         curve = self.addCurve("", color, color, 1, style = QwtPlotCurve.Lines, symbol = QwtSymbol.NoSymbol, xData = [0, xAnchor*attrVal], yData = [0, yAnchor*attrVal], lineWidth=3)
464a487
>                         self.tooltipCurves.append(curve)
488a512,515
>         OWGraph.mouseMoveEvent(self, e)
>         self.replot()
> 
> 
647,648c674,675
<         #rx = self.transform(xBottom, 1) - self.transform(xBottom, 0)
<         #ry = self.transform(yLeft, 0) - self.transform(yLeft, 1)
---
>         #rx = self.transform(QwtPlot.xBottom, 1) - self.transform(QwtPlot.xBottom, 0)
>         #ry = self.transform(QwtPlot.yLeft, 0) - self.transform(QwtPlot.yLeft, 1)
650,653c677,680
<         rx = self.transform(xBottom, 1) - self.transform(xBottom, -1)
<         ry = self.transform(yLeft, -1) - self.transform(yLeft, 1)
<         ox = self.transform(xBottom, 0) - self.transform(xBottom, -1)
<         oy = self.transform(yLeft, -1) - self.transform(yLeft, 0)
---
>         rx = self.transform(QwtPlot.xBottom, 1) - self.transform(QwtPlot.xBottom, -1)
>         ry = self.transform(QwtPlot.yLeft, -1) - self.transform(QwtPlot.yLeft, 1)
>         ox = self.transform(QwtPlot.xBottom, 0) - self.transform(QwtPlot.xBottom, -1)
>         oy = self.transform(QwtPlot.yLeft, -1) - self.transform(QwtPlot.yLeft, 0)
687,689c714,716
<             target = QRectF(self.transform(xBottom, -1), self.transform(yLeft, 1),
<                             self.transform(xBottom, 1) - self.transform(xBottom, -1),
<                             self.transform(yLeft, -1) - self.transform(yLeft, 1))
---
>             target = QRectF(self.transform(QwtPlot.xBottom, -1), self.transform(QwtPlot.yLeft, 1),
>                             self.transform(QwtPlot.xBottom, 1) - self.transform(QwtPlot.xBottom, -1),
>                             self.transform(QwtPlot.yLeft, -1) - self.transform(QwtPlot.yLeft, 1))
692,699c719,720
< #            painter.drawImage(self.transform(xBottom, -1), self.transform(yLeft, 1), self.potentialsImage)
<         OWPlot.drawCanvas(self, painter)
<         
<     def update_point_size(self):
<         if self.main_curve:
<             # We never have different sizes in LinProj
<             self.main_curve.set_point_sizes([self.pointWidth])
<         
---
> #            painter.drawImage(self.transform(QwtPlot.xBottom, -1), self.transform(QwtPlot.yLeft, 1), self.potentialsImage)
>         OWGraph.drawCanvas(self, painter)
