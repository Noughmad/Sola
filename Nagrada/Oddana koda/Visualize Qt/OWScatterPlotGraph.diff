4c4
< from plot.owplot import *
---
> from OWGraph import *
11d10
< import numpy
23c22
< class OWScatterPlotGraphQt(OWPlot, orngScaleScatterPlotData):
---
> class OWScatterPlotGraph(OWGraph, orngScaleScatterPlotData):
25c24
<         OWPlot.__init__(self, parent, name, widget = scatterWidget)
---
>         OWGraph.__init__(self, parent, name)
30a30
>         self.showAxisScale = 1
49c49
<         self.potentialsCurve = None
---
> 
52c52
<         OWPlot.setData(self, data)
---
>         OWGraph.setData(self, data)
59c59,65
<         self.legend().clear()
---
> #        if not self.haveData:
> #            self.clear()
> #            self.oldLegendKeys = {}
> #            return
>         self.removeDrawingCurves(removeLegendItems = 0)      # my function, that doesn't delete selection curves
>         self.detachItems(QwtPlotItem.Rtti_PlotMarker)
>         self.tips.removeAll()
63c69
<         # self.canvas().invalidatePaintCache()
---
>         self.canvas().invalidatePaintCache()
68,69c74
<             self.setAxisScale(xBottom, 0, 1, 1); 
<             self.setAxisScale(yLeft, 0, 1, 1)
---
>             self.setAxisScale(QwtPlot.xBottom, 0, 1, 1); self.setAxisScale(QwtPlot.yLeft, 0, 1, 1)
89,90c94,95
<             
<         showContinuousColorLegend = colorIndex != -1 and self.dataDomain[colorIndex].varType == orange.VarTypes.Continuous
---
> 
>         showContinuousColorLegend = self.showLegend and colorIndex != -1 and self.dataDomain[colorIndex].varType == orange.VarTypes.Continuous
116c121
<         self.setAxisScale(xBottom, xmin, xmax,  discreteX)
---
>         self.setAxisScale(QwtPlot.xBottom, xmin, xmax + showContinuousColorLegend * xVar * 0.07, discreteX)
131c136
<         self.setAxisScale(yLeft, ymin, ymax, discreteY)
---
>         self.setAxisScale(QwtPlot.yLeft, ymin, ymax, discreteY)
142,144d146
<         if self.potentialsCurve:
<             self.potentialsCurve.detach()
<             self.potentialsCurve = None
155,159d156
<             
<             sys.stderr.flush()
<             self.xmin = xmin; self.xmax = xmax
<             self.ymin = ymin; self.ymax = ymax
<             
162,163d158
<                 self.potentialsCurve = ProbabilitiesItem(self.potentialsClassifier, self.squareGranularity, 1., self.spaceBetweenCells)
<                 self.potentialsCurve.attach(self)
166,185c161,163
<         
<         """
<             Create a single curve with different points
<         """
<         
<         def_color = self.color(OWPalette.Data)
<         def_size = self.point_width
<         def_shape = self.curveSymbols[0]
< 
<         if colorIndex != -1:
<             if self.dataDomain[colorIndex].varType == orange.VarTypes.Continuous:
<                 c_data = self.noJitteringScaledData[colorIndex]
<                 palette = self.continuous_palette
<             else:
<                 c_data = self.originalData[colorIndex]
<                 palette = self.discrete_palette
<             checked_color_data = [(c_data[i] if validData[i] else 0) for i in range(len(c_data))]
<             colorData = [QColor(*palette.getRGB(i)) for i in checked_color_data]
<         else:
<             colorData = [def_color]
---
>             sys.stderr.flush()
>             self.xmin = xmin; self.xmax = xmax
>             self.ymin = ymin; self.ymax = ymax
187,193c165,216
<         if sizeIndex != -1:
<             sizeData = [MIN_SHAPE_SIZE + round(i * self.pointWidth) for i in self.noJitteringScaledData[sizeIndex]]
<         else:
<             sizeData = [def_size]
<             
<         if shapeIndex != -1 and self.dataDomain[shapeIndex].varType == orange.VarTypes.Discrete:
<             shapeData = [self.curveSymbols[int(i)] for i in self.originalData[shapeIndex]]
---
>         # ##############################################################
>         # if we have insideColors defined
>         if self.insideColors and self.dataHasDiscreteClass and self.haveData:
>             # variables and domain for the table
>             classData = self.originalData[self.dataClassIndex]
>             (insideData, stringData) = self.insideColors
>             j = 0
>             equalSize = len(self.rawData) == len(insideData)
>             for i in range(len(self.rawData)):
>                 if not validData[i]:
>                     j += equalSize
>                     continue
> 
>                 fillColor = self.discPalette[classData[i], 255*insideData[j]]
>                 edgeColor = self.discPalette[classData[i]]
> 
>                 key = self.addCurve("", fillColor, edgeColor, self.pointWidth, xData = [xData[i]], yData = [yData[i]])
> 
>                 # we add a tooltip for this point
>                 text = self.getExampleTooltipText(self.rawData[j], attrIndices)
>                 text += "<hr>" + stringData % (100*insideData[i])
>                 self.addTip(xData[i], yData[i], text = text.decode("unicode_escape"))
>                 j+=1
> 
>         # ##############################################################
>         # no subset data and discrete color index
>         elif (colorIndex == -1 or self.dataDomain[colorIndex].varType == orange.VarTypes.Discrete) and shapeIndex == -1 and sizeIndex == -1 and self.haveData and not self.haveSubsetData and not labelAttr:
>             if colorIndex != -1:
>                 classCount = len(self.dataDomain[colorIndex].values)
>             else: classCount = 1
> 
>             pos = [[ [] , [] ] for i in range(classCount)]
>             indices = [colorIndex, xAttrIndex, yAttrIndex]
>             if -1 in indices: indices.remove(-1)
>             validData = self.getValidList(indices)
>             colorData = self.originalData[colorIndex]
>             for i in range(len(self.rawData)):
>                 if not validData[i]: continue
>                 if colorIndex != -1: index = int(colorData[i])
>                 else:                index = 0
>                 pos[index][0].append(xData[i])
>                 pos[index][1].append(yData[i])
>                 self.tips.addToolTip(xData[i], yData[i], i)    # we add a tooltip for this point
> 
>             for i in range(classCount):
>                 newColor = colorIndex != -1 and QColor(self.discPalette[i]) or QColor(Qt.black)
>                 newColor.setAlpha(self.alphaValue)
>                 key = self.addCurve("", newColor, newColor, self.pointWidth, symbol = self.curveSymbols[0], xData = pos[i][0], yData = pos[i][1])
> 
> 
>         # ##############################################################
>         # slower, unoptimized drawing because we use different symbols and/or different sizes of symbols
195c218,315
<             shapeData = [def_shape]
---
>             attrs = [xAttrIndex, yAttrIndex, colorIndex, shapeIndex, sizeIndex]
>             while -1 in attrs: attrs.remove(-1)
>             validData = self.getValidList(attrs)
>             if self.haveSubsetData:
>                 subsetIdsToDraw = dict([(example.id, 1) for example in self.rawSubsetData])
>                 showFilled = 0
>             else:
>                 subsetIdsToDraw ={}
>                 showFilled = self.showFilledSymbols
> 
>             xPointsToAdd = {}
>             yPointsToAdd = {}
>             for i in range(len(self.rawData)):
>                 if not validData[i]: continue
>                 if subsetIdsToDraw.has_key(self.rawData[i].id):
>                     continue
> 
>                 if colorIndex != -1:
>                     if self.dataDomain[colorIndex].varType == orange.VarTypes.Continuous:
>                         newColor = self.contPalette.getRGB(self.noJitteringScaledData[colorIndex][i])
>                     else:
>                         newColor = self.discPalette.getRGB(self.originalData[colorIndex][i])
>                 else: newColor = (0,0,0)
> 
>                 Symbol = self.curveSymbols[0]
>                 if shapeIndex != -1: Symbol = self.curveSymbols[int(self.originalData[shapeIndex][i])]
> 
>                 size = self.pointWidth
>                 if sizeIndex != -1: size = MIN_SHAPE_SIZE + round(self.noJitteringScaledData[sizeIndex][i] * self.pointWidth)
> 
>                 if not xPointsToAdd.has_key((newColor, size, Symbol, showFilled)):
>                     xPointsToAdd[(newColor, size, Symbol, showFilled)] = []
>                     yPointsToAdd[(newColor, size, Symbol, showFilled)] = []
>                 xPointsToAdd[(newColor, size, Symbol, showFilled)].append(xData[i])
>                 yPointsToAdd[(newColor, size, Symbol, showFilled)].append(yData[i])
>                 self.tips.addToolTip(xData[i], yData[i], i)     # we add a tooltip for this point
> 
>                 # Show a label by each marker
>                 if labelAttr:
>                     if labelAttr in [self.rawData.domain.getmeta(mykey).name for mykey in self.rawData.domain.getmetas().keys()] + [var.name for var in self.rawData.domain]:
>                         if self.rawData[i][labelAttr].isSpecial(): continue
>                         if self.rawData[i][labelAttr].varType==orange.VarTypes.Continuous:
>                             lbl = "%4.1f" % orange.Value(self.rawData[i][labelAttr])
>                         else:
>                             lbl = str(self.rawData[i][labelAttr].value)
>                         self.addMarker(lbl, xData[i], yData[i], Qt.AlignCenter | Qt.AlignBottom)
> 
>             # if we have a data subset that contains examples that don't exist in the original dataset we show them here
>             if self.haveSubsetData:
>                 validSubData = self.getValidSubsetList(attrs)
>                 xData, yData = self.getXYSubsetDataPositions(xAttr, yAttr)
>                 for i in range(len(self.rawSubsetData)):
>                     if not validSubData[i]: continue
> 
>                     if colorIndex != -1 and self.validSubsetDataArray[colorIndex][i]:
>                         if self.rawData.domain[colorIndex].varType == orange.VarTypes.Continuous:
>                             newColor = self.contPalette.getRGB(self.scaledSubsetData[colorIndex][i])
>                         else:
>                             newColor = self.discPalette.getRGB(self.originalSubsetData[colorIndex][i])
>                     else: newColor = (0,0,0)
> 
>                     if shapeIndex != -1: Symbol = self.curveSymbols[int(self.originalSubsetData[shapeIndex][i])]
>                     else:                Symbol = self.curveSymbols[0]
> 
>                     size = self.pointWidth
>                     if sizeIndex != -1: size = MIN_SHAPE_SIZE + round(self.noJitteringScaledSubsetData[sizeIndex][i] * self.pointWidth)
> 
>                     if not xPointsToAdd.has_key((newColor, size, Symbol, 1)):
>                         xPointsToAdd[(newColor, size, Symbol, 1)] = []
>                         yPointsToAdd[(newColor, size, Symbol, 1)] = []
>                     xPointsToAdd[(newColor, size, Symbol, 1)].append(xData[i])
>                     yPointsToAdd[(newColor, size, Symbol, 1)].append(yData[i])
>                     self.tips.addToolTip(xData[i], yData[i], -i-1)     # we add a tooltip for this point
> 
>                     # Show a label by each marker
>                     if labelAttr:
>                         if labelAttr in [self.rawSubsetData.domain.getmeta(mykey).name for mykey in self.rawSubsetData.domain.getmetas().keys()] + [var.name for var in self.rawSubsetData.domain]:
>                             if self.rawSubsetData[i][labelAttr].isSpecial(): continue
>                             if self.rawSubsetData[i][labelAttr].varType==orange.VarTypes.Continuous:
>                                 lbl = "%4.1f" % orange.Value(self.rawSubsetData[i][labelAttr])
>                             else:
>                                 lbl = str(self.rawSubsetData[i][labelAttr].value)
>                             self.addMarker(lbl, xData[i], yData[i], Qt.AlignCenter | Qt.AlignBottom)
> 
>             for i, (color, size, symbol, showFilled) in enumerate(xPointsToAdd.keys()):
>                 xData = xPointsToAdd[(color, size, symbol, showFilled)]
>                 yData = yPointsToAdd[(color, size, symbol, showFilled)]
>                 c = QColor(*color)
>                 c.setAlpha(self.alphaValue)
>                 self.addCurve("", c, c, size, symbol = symbol, xData = xData, yData = yData, showFilledSymbols = showFilled)
> 
>         # ##############################################################
>         # show legend if necessary
>         if self.showLegend == 1:
>             legendKeys = {}
>             colorIndex = colorIndex if colorIndex != -1 and self.dataDomain[colorIndex].varType == orange.VarTypes.Discrete else -1
>             shapeIndex = shapeIndex if shapeIndex != -1 and self.dataDomain[shapeIndex].varType == orange.VarTypes.Discrete else -1
>             sizeIndex = sizeIndex if sizeIndex != -1 and self.dataDomain[sizeIndex].varType == orange.VarTypes.Discrete else -1
197,199c317,320
<         if labelAttr and labelAttr in [self.rawData.domain.getmeta(mykey).name for mykey in self.rawData.domain.getmetas().keys()] + [var.name for var in self.rawData.domain]:
<             if self.rawData[0][labelAttr].varType == orange.VarTypes.Continuous:
<                 labelData = ["%4.1f" % orange.Value(i[labelAttr]) if not i[labelAttr].isSpecial() else "" for i in self.rawData]
---
>             singleLegend = len([index for index in [colorIndex, shapeIndex, sizeIndex] if index != -1]) == 1
>             if singleLegend:
>                 #Show only values
>                 legendJoin = lambda name, val: val
201c322,353
<                 labelData = [str(i[labelAttr].value) if not i[labelAttr].isSpecial() else "" for i in self.rawData]
---
>                 legendJoin = lambda name, val: name + "=" + val 
>                 
>             if colorIndex != -1:
>                 num = len(self.dataDomain[colorIndex].values)
>                 val = [[], [], [self.pointWidth]*num, [QwtSymbol.Ellipse]*num]
>                 varValues = getVariableValuesSorted(self.dataDomain[colorIndex])
>                 for ind in range(num):
>                     val[0].append(legendJoin(self.dataDomain[colorIndex].name, varValues[ind]))
>                     val[1].append(self.discPalette[ind])
>                 legendKeys[colorIndex] = val
> 
>             if shapeIndex != -1:
>                 num = len(self.dataDomain[shapeIndex].values)
>                 if legendKeys.has_key(shapeIndex):  val = legendKeys[shapeIndex]
>                 else:                               val = [[], [Qt.black]*num, [self.pointWidth]*num, []]
>                 varValues = getVariableValuesSorted(self.dataDomain[shapeIndex])
>                 val[3] = []; val[0] = []
>                 for ind in range(num):
>                     val[3].append(self.curveSymbols[ind])
>                     val[0].append(legendJoin(self.dataDomain[shapeIndex].name, varValues[ind]))
>                 legendKeys[shapeIndex] = val
> 
>             if sizeIndex != -1:
>                 num = len(self.dataDomain[sizeIndex].values)
>                 if legendKeys.has_key(sizeIndex):  val = legendKeys[sizeIndex]
>                 else:                               val = [[], [Qt.black]*num, [], [QwtSymbol.Ellipse]*num]
>                 val[2] = []; val[0] = []
>                 varValues = getVariableValuesSorted(self.dataDomain[sizeIndex])
>                 for ind in range(num):
>                     val[0].append(legendJoin(self.dataDomain[sizeIndex].name, varValues[ind]))
>                     val[2].append(MIN_SHAPE_SIZE + round(ind*self.pointWidth/len(varValues)))
>                 legendKeys[sizeIndex] = val
203c355
<             labelData = [""]
---
>             legendKeys = {}
205,237c357,362
<         if self.haveSubsetData:
<             subset_ids = [example.id for example in self.rawSubsetData]
<             marked_data = [example.id in subset_ids for example in self.rawData]
<             showFilled = 0
<         else:
<             marked_data = []
<         self.set_main_curve_data(xData, yData, colorData, labelData, sizeData, shapeData, marked_data, validData)
<         
<         '''
<             Create legend items in any case
<             so that show/hide legend only
<         '''
<         discColorIndex = colorIndex if colorIndex != -1 and self.dataDomain[colorIndex].varType == orange.VarTypes.Discrete else -1
<         discShapeIndex = shapeIndex if shapeIndex != -1 and self.dataDomain[shapeIndex].varType == orange.VarTypes.Discrete else -1
<         discSizeIndex = sizeIndex if sizeIndex != -1 and self.dataDomain[sizeIndex].varType == orange.VarTypes.Discrete else -1
<                     
<         if discColorIndex != -1:
<             num = len(self.dataDomain[discColorIndex].values)
<             varValues = getVariableValuesSorted(self.dataDomain[discColorIndex])
<             for ind in range(num):
<                 self.legend().add_item(self.dataDomain[discColorIndex].name, varValues[ind], OWPoint(def_shape, self.discPalette[ind], def_size))
< 
<         if discShapeIndex != -1:
<             num = len(self.dataDomain[discShapeIndex].values)
<             varValues = getVariableValuesSorted(self.dataDomain[discShapeIndex])
<             for ind in range(num):
<                 self.legend().add_item(self.dataDomain[discShapeIndex].name, varValues[ind], OWPoint(self.curveSymbols[ind], def_color, def_size))
< 
<         if discSizeIndex != -1:
<             num = len(self.dataDomain[discSizeIndex].values)
<             varValues = getVariableValuesSorted(self.dataDomain[discSizeIndex])
<             for ind in range(num):
<                 self.legend().add_item(self.dataDomain[discSizeIndex].name, varValues[ind], OWPoint(def_shape, def_color, MIN_SHAPE_SIZE + round(ind*self.pointWidth/len(varValues))))
---
>         if legendKeys != self.oldLegendKeys:
>             self.oldLegendKeys = legendKeys
>             self.legend().clear()
>             for val in legendKeys.values():       # add new curve keys
>                 for i in range(len(val[1])):
>                     self.addCurve(val[0][i], val[1][i], val[1][i], val[2][i], symbol = val[3][i], enableLegend = 1)
242,243c367,385
<             self.legend().add_color_gradient(colorAttr, [("%%.%df" % self.dataDomain[colorAttr].numberOfDecimals % v) for v in self.attrValues[colorAttr]])
<             
---
>             x0 = xmax + xVar*1.0/100.0;  x1 = x0 + xVar*2.5/100.0
>             count = 200
>             height = yVar / float(count)
>             xs = [x0, x1, x1, x0]
> 
>             for i in range(count):
>                 y = yVarMin + i*yVar/float(count)
>                 col = self.contPalette[i/float(count)]
>                 col.setAlpha(self.alphaValue)
>                 curve = PolygonCurve(QPen(col), QBrush(col))
>                 curve.setData(xs, [y,y, y+height, y+height])
>                 curve.attach(self)
> 
> 
>             # add markers for min and max value of color attribute
>             (colorVarMin, colorVarMax) = self.attrValues[colorAttr]
>             self.addMarker("%s = %%.%df" % (colorAttr, self.dataDomain[colorAttr].numberOfDecimals) % (colorVarMin), x0 - xVar*1./100.0, yVarMin + yVar*0.04, Qt.AlignLeft)
>             self.addMarker("%s = %%.%df" % (colorAttr, self.dataDomain[colorAttr].numberOfDecimals) % (colorVarMax), x0 - xVar*1./100.0, yVarMin + yVar*0.96, Qt.AlignLeft)
> 
267c409
< ##                    self.addCurve("", color, color, 1, QwtPlotCurve.Lines, OWPoint.NoSymbol, xData = [float(shortData[p1][0]), float(shortData[p2][0])], yData = [float(shortData[p1][1]), float(shortData[p2][1])], lineWidth = width)
---
> ##                    self.addCurve("", color, color, 1, QwtPlotCurve.Lines, QwtSymbol.NoSymbol, xData = [float(shortData[p1][0]), float(shortData[p2][0])], yData = [float(shortData[p1][1]), float(shortData[p2][1])], lineWidth = width)
271,279c413
< ##                self.addCurve("", color, color, 1, QwtPlotCurve.Lines, OWPoint.NoSymbol, xData = [float(shortData[p1][0]), float(shortData[p2][0])], yData = [float(shortData[p1][1]), float(shortData[p2][1])], lineWidth = width)
<     
<     def update_point_size(self):
<         if self.scatterWidget.attrSize:
<             self.scatterWidget.updateGraph()
<         else:
<             self.main_curve.set_point_sizes([self.point_width])
<             self.update_curves()
<     
---
> ##                self.addCurve("", color, color, 1, QwtPlotCurve.Lines, QwtSymbol.NoSymbol, xData = [float(shortData[p1][0]), float(shortData[p2][0])], yData = [float(shortData[p1][1]), float(shortData[p2][1])], lineWidth = width)
289c423
<     # override the default buildTooltip function defined in OWPlot
---
>     # override the default buildTooltip function defined in OWGraph
308a443
>         if not self.selectionCurveList: return (None, self.rawData)       # if no selections exist
335c470
<         OWPlot.onMouseReleased(self, e)
---
>         OWGraph.onMouseReleased(self, e)
340,346c475,476
<         s = self.graph_area.toRect().size()
<         qDebug('Computing potentials with size ' + repr(s))
<         if not s.isValid():
<             self.potentialsImage = QImage()
<             return
<         rx = s.width()
<         ry = s.height()
---
>         rx = self.transform(QwtPlot.xBottom, self.xmax) - self.transform(QwtPlot.xBottom, self.xmin)
>         ry = self.transform(QwtPlot.yLeft, self.ymin) - self.transform(QwtPlot.yLeft, self.ymax)
350,351c480,481
<         ox = int(self.transform(xBottom, 0) - self.transform(xBottom, self.xmin))
<         oy = int(self.transform(yLeft, self.ymin) - self.transform(yLeft, 0))
---
>         ox = self.transform(QwtPlot.xBottom, 0) - self.transform(QwtPlot.xBottom, self.xmin)
>         oy = self.transform(QwtPlot.yLeft, self.ymin) - self.transform(QwtPlot.yLeft, 0)
353a484,501
>             if self.potentialsClassifier.classVar.varType == orange.VarTypes.Continuous:
>                 imagebmp = orangeom.potentialsBitmap(self.potentialsClassifier, rx, ry, ox, oy, self.squareGranularity, 1)  # the last argument is self.trueScaleFactor (in LinProjGraph...)
>                 palette = [qRgb(255.*i/255., 255.*i/255., 255-(255.*i/255.)) for i in range(255)] + [qRgb(255, 255, 255)]
>             else:
>                 imagebmp, nShades = orangeom.potentialsBitmap(self.potentialsClassifier, rx, ry, ox, oy, self.squareGranularity, 1., self.spaceBetweenCells) # the last argument is self.trueScaleFactor (in LinProjGraph...)
>                 palette = []
>                 sortedClasses = getVariableValuesSorted(self.potentialsClassifier.domain.classVar)
>                 for cls in self.potentialsClassifier.classVar.values:
>                     color = self.discPalette.getRGB(sortedClasses.index(cls))
>                     towhite = [255-c for c in color]
>                     for s in range(nShades):
>                         si = 1-float(s)/nShades
>                         palette.append(qRgb(*tuple([color[i]+towhite[i]*si for i in (0, 1, 2)])))
>                 palette.extend([qRgb(255, 255, 255) for i in range(256-len(palette))])
> 
>             self.potentialsImage = QImage(imagebmp, rx, ry, QImage.Format_Indexed8)
>             self.potentialsImage.setColorTable(ColorPalette.signedPalette(palette) if qVersion() < "4.5" else palette)
>             self.potentialsImage.setNumColors(256)
355a504,519
> 
> 
>     def drawCanvas(self, painter):
>         if self.showProbabilities and getattr(self, "potentialsClassifier", None):
>             if not (self.potentialsClassifier is getattr(self,"potentialsImageFromClassifier", None)):
>                 self.computePotentials()
>             target = QRectF(self.transform(QwtPlot.xBottom, self.xmin), self.transform(QwtPlot.yLeft, self.ymax),
>                             self.transform(QwtPlot.xBottom, self.xmax) - self.transform(QwtPlot.xBottom,self.xmin),
>                             self.transform(QwtPlot.yLeft, self.ymin) - self.transform(QwtPlot.yLeft, self.ymax))
>             source = QRectF(0, 0, self.potentialsImage.size().width(), self.potentialsImage.size().height())
>             painter.drawImage(target, self.potentialsImage, source)
> #            painter.drawImage(self.transform(QwtPlot.xBottom, self.xmin), self.transform(QwtPlot.yLeft, self.ymax), self.potentialsImage)
>         OWGraph.drawCanvas(self, painter)
> 
> 
> 
